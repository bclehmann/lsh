WHITESPACE = _{ " " |  "\\" ~ NEWLINE } // i.e. newlines preceded by a backslash are insignificant whitespace

NON_ZERO_DIGIT = _{ '1'..'9' }
DIGIT = _{ ("0" | NON_ZERO_DIGIT) }
DECIMAL_POINT = _{ "." }

PLUS_SIGN = { "+" }
MINUS_SIGN = { "-" }
STAR_SIGN = { "*" }
FORWARD_SLASH = { "/" }

bin_op = _{ PLUS_SIGN | MINUS_SIGN | STAR_SIGN | FORWARD_SLASH }

integer = @{ MINUS_SIGN? ~ DIGIT+ }
real = @{ MINUS_SIGN? ~ integer? ~ DECIMAL_POINT ~ DIGIT+ }

// Must be in this order, @{ integer | real } would match 123 in the input 123.456 because it would greedily match as integer instead
number =  @{ real | integer }

identifier = @{ (ASCII_ALPHA | "_" )+ ~ (ASCII_ALPHANUMERIC | "_")* }

ASSIGNMENT_OPERATOR = _{ "=" }
assignment = { identifier ~ ASSIGNMENT_OPERATOR ~ expr }

// This is borrowed with some modifications from the pest-parser book: https://github.com/pest-parser/book/blob/master/src/examples/rust/literals.md#strings
raw_string_double_quote = _{ (!("\\" | "\"") ~ ANY)+ }
raw_string_single_quote = _{ (!("\\" | "'") ~ ANY)+ }
hex = _{ '0'..'9' | 'a'..'f' | 'A'..'F' }
unicode_hex = _{ hex{1, 6} }
predefined = _{ "n" | "r" | "t" | "\\" | "0" | "\"" | "'" }
byte = _{ "x" ~ hex{2} }
unicode = _{ "u" ~ "{" ~ unicode_hex ~ "}" }
escape = _{ "\\" ~ (predefined | byte | unicode) }
string = { "\"" ~ (raw_string_double_quote | escape)* ~ "\"" | "'" ~ (raw_string_single_quote | escape)* ~ "'"}

atom = _{ function_call | number | "(" ~ expr ~ ")" | identifier | string | block }
expr = { atom ~ (bin_op ~ atom)* }

function_call = { identifier ~ "(" ~ expr ? ~ ("," ~ expr)* ~ ")" }
function_param_list = { "(" ~ identifier ? ~ ("," ~ identifier)* ~ ")" }
function_def = { "def" ~ identifier ~ function_param_list ~ "=>" ~ expr }

line = _{ ( return_statement | function_def | assignment | expr ) ~ NEWLINE }
lines = _{ (line | NEWLINE)* }

block = { "{" ~ NEWLINE* ~ lines ~ NEWLINE* ~ "}" }
return_statement = { "return" ~ expr }